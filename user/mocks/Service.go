// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/pranavkonde/LMS-Go/user"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *Service) Create(ctx context.Context, req user.CreateRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *Service) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Service) FindByID(ctx context.Context, id string) (user.FindByIDResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 user.FindByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) user.FindByIDResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user.FindByIDResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: ctx, Email, Password
func (_m *Service) GenerateJWT(ctx context.Context, Email string, Password string) (string, error) {
	ret := _m.Called(ctx, Email, Password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, Email, Password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, Email, Password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *Service) List(ctx context.Context) (user.ListResponse, error) {
	ret := _m.Called(ctx)

	var r0 user.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context) user.ListResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user.ListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *Service) Update(ctx context.Context, req user.UpdateRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UpdateRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, req
func (_m *Service) UpdatePassword(ctx context.Context, req user.UpdatePasswordStruct) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UpdatePasswordStruct) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
